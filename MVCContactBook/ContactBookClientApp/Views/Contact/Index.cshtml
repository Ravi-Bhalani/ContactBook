@using ContactBookClientApp.ViewModels

@model List<ContactViewModel>
@{
    string search = ViewBag.Letter;
}

<form id="searchForm" method="get" action="@Url.Action("Index", "Contact")">
    <div class="input-group mb-3">
       
        <input type="text" class="form-control" placeholder="Search contacts" name="letter" value="@ViewBag.Letter" oninput="submitForm()">
        <div class="input-group-append">
            <input type="hidden" name="search" value="yes" />
            <button class="btn btn-outline-secondary" type="submit">Search</button>
            <button class="btn btn-outline-secondary d-none" type="button" id="clearButton" onclick="clearSearch()">Clear</button>
        </div>
    </div>
  
</form>

<h3 class="col-sm-10">Contacts</h3>
<a asp-action="Favourites" class="btn btn-outline-primary m-4 mx-0 col-sm-2">
    <span class="mr-9">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-star-fill text-danger" viewBox="0 0 16 16">
            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
        </svg>
    </span>
     
</a>

<h2 class="text-primary">@ViewBag.Letter</h2>

<form method="get">
    <div class="btn-group mb-3" role="group">
       @*  @for (char letter = 'A'; letter <= 'Z'; letter++)
        {
            <button class="btn btn-outline-primary" type="submit" name="letter" value="@letter">@letter</button>
        } *@
        @foreach (var letter in ViewBag.DistinctLetters)
        {
            <button class="btn btn-outline-primary" type="submit" name="letter" value="@letter">@letter</button>
        }
        <button class="btn btn-outline-primary" type="submit" name="letter" value="">Show All</button>
    </div>
   
</form>
@* <form method="get">
    <div class="btn-group mb-3" role="group">
        @if (ViewBag.SortOrder == "asc")
        {
            <button class="btn btn-outline-primary" type="submit" name="sortOrder" value="@ViewBag.SortOrder" name="sortOrder" value="desc">Descending</button>
        }
        else
        {
            <button class="btn btn-outline-primary" type="submit" name="sortOrder" value="@ViewBag.SortOrder" name="sortOrder" value="asc">Ascending</button>
        }
    </div>
</form> *@

<div class="table-responsive">
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Profile Photo</th>
                <th>
                   

                                  
                        Name
                        <a asp-action="Index" asp-route-letter="@ViewBag.Letter" asp-route-sortOrder="asc" asp-route-pageSize="@ViewBag.PageSize" style="text-decoration:none;">
                            <div class="arrow-container">
                                <span class="arrow-btn">&#9650;</span> <!-- Up arrow -->
                            </div>

                        </a>

                        <!-- Descending button -->
                        <a asp-action="Index" asp-route-letter="@ViewBag.Letter" asp-route-sortOrder="desc" asp-route-pageSize="@ViewBag.PageSize" style="text-decoration:none;">

                            <div class="arrow-container">
                                <span class="arrow-btn">&#9660;</span> <!-- Down arrow -->
                            </div>
                        </a>
               
                </th> <!-- Ascending button -->
               
                <th></th>

                <th>Action</th>
            </tr>
        </thead>
        @if (Model == null || Model.Count == 0)
        {
            <tbody>
                <td colspan="4" class="text-center">No records found</td>
            </tbody>
        }
        else
        {
            <tbody>
                @foreach (var contact in Model)
                {
                    <tr onclick="location.href='@Url.Action("Details", "Contact", new { id = contact.ContactId })';" style="cursor: pointer;">
                        @if (string.IsNullOrEmpty(contact.FileName))
                        {
                            <td><img src="@Url.Content("~/Uploads/DefaultImage.jpg")" alt="Profile" width="50" height="50" class="rounded-circle" /></td>
                        }
                        else
                        {
                            <td><img src="@Url.Content("~/Uploads/" + contact.FileName)" alt="Profile" width="50" height="50" class="rounded-circle" /></td>
                        }
                        <td>@contact.FirstName @contact.LastName</td>
                        <td>
                        @if (contact.IsFavourite)
                        {
                            <span class="mr-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill text-danger" viewBox="0 0 16 16">
                                    <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                </svg>
                            </span>
                        }
                        </td>
                        <td>
                         
                            <a asp-action="Details" asp-route-id="@contact.ContactId" class="btn btn-sm btn-outline-info">Details</a>
                            <a asp-action="Edit" asp-route-id="@contact.ContactId" class="btn btn-sm btn-outline-dark">Edit</a>
                            <a asp-action="Delete" asp-route-id="@contact.ContactId" class="btn btn-sm btn-outline-danger">Delete</a>

                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>

@if (Model.Count > 0)
{
    <div class="d-flex justify-content-between align-items-center mt-4">
        <!-- Page size dropdown -->
        <div>
            <label for="pageSize">Page Size:</label>
            <select id="pageSize" onchange="changePageSize(this)" class="form-control form-control-sm">
                <option value="2">2</option>
                <option value="4">4</option>
                <option value="6">6</option>
                <option value="10">10</option>
                <!-- Add more options as needed -->
            </select>
        </div>
        <!-- Pagination -->
        <ul class="pagination">
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.Page ? "active" : "")">
                    <a class="page-link" href="/Contact/Index?letter=@ViewBag.Letter&search=@ViewBag.Search&page=@i&pageSize=@ViewBag.PageSize&sortOrder=@ViewBag.SortOrder">@i</a>
                </li>
            }
        </ul>
    </div>
}

<a asp-action="Create" class="btn btn-info mt-4">
    Add New Contact
</a>

<script>
    // Initialize page size dropdown with current selected size
    document.addEventListener("DOMContentLoaded", function () {
        var currentPageSize = @(ViewBag.PageSize);
        var pageSizeDropdown = document.getElementById("pageSize");
        for (var i = 0; i < pageSizeDropdown.options.length; i++) {
            if (pageSizeDropdown.options[i].value === currentPageSize.toString()) {
                pageSizeDropdown.selectedIndex = i;
                break;
            }
        }
    });

    // Function to handle page size change
    function changePageSize(select) {
        var pageSize = select.value;
        var currentPage = "@ViewBag.CurrentPage";
        var letter = "@ViewBag.Letter";
        var sortOrder = "@ViewBag.SortOrder";
        var search = "@ViewBag.Search";
        window.location.href = "/Contact/Index?letter=" + letter +"&search="+ search+ "&page=" + currentPage + "&pageSize=" + pageSize + "&sortOrder=" + sortOrder;
    }

    function toggleClearButton() {
        var searchInput = document.querySelector('input[name="letter"]');
        var clearButton = document.getElementById('clearButton');
        if (searchInput.value.trim() !== '') {
            clearButton.classList.remove('d-none'); // Show clear button
        } else {
            clearButton.classList.add('d-none'); // Hide clear button
        }
    }

    function submitForm() {
        
        if (searchInput.value.trim() != " ") {
            var searchInput = document.querySelector('input[name="letter"]');
             document.getElementById('searchForm').submit();
        }
       
    }

    // Function to show or hide the clear button based on search input content
    function toggleClearButton() {
        var searchInput = document.querySelector('input[name="letter"]');
        var clearButton = document.getElementById('clearButton');
        if (searchInput.value.trim() !== '') {
            clearButton.classList.remove('d-none'); // Show clear button
        } else {
            clearButton.classList.add('d-none'); // Hide clear button
        }
    }

    // Function to clear the search input
   @*  function clearSearch() {
        var searchInput = document.querySelector('input[name="letter"]');
        searchInput.value = ''; // Clear search input
        toggleClearButton(); // Hide clear button
        document.getElementById('searchForm').submit(); // Submit form after clearing
    } *@

        function clearSearch() {
            var searchInput = document.querySelector('input[name="letter"]');
            searchInput.value = ''; // Clear search input
            toggleClearButton(); // Hide clear button
        }

    // Call toggleClearButton initially to set the initial visibility of the clear button
    toggleClearButton();

    // Add event listener to search input to toggle clear button visibility dynamically
    document.querySelector('input[name="letter"]').addEventListener('input', function () {
        toggleClearButton();
        submitForm(); // Submit form when search input changes
    });

</script>

<style>
    .arrow-container {
       display: flex; /* Use flexbox */
        flex-direction: column; /* Align items vertically */
        align-items: center; /* Center align items horizontally */
       @*  margin-left: -2rem;  *@
        margin-left: 5px; /* Adjust margin as needed */
        width: 20px; /* Adjust width as needed */
    }
    
 </style>
